---
draft: true
title: "Skipping Entry"
description: "_Exploring skip-entry dynamics in anticipation of Artemis 1!_"
date: "2022-09-03"
file-modified: "2022-09-03"
author: "Joe(y) Carpinelli"
# image: "/images/introduction-to-dynamics.png"
categories:
  - Julia
  - Dynamics
  - Space
  - Technical
aliases:
  - /blog/posts/skipping-entry.html
---

:::{.callout-warning appearance="simple"}
This is an old problem set from graduate school! It comes with a fun story --- more to come!
:::

# Problem Set 2: {-}
#### Joe Carpinelli {-}
#### Due: 03/11/2020 {-}

## Code Imports: {-}

```python
# Importing custom module
import sys
from pathlib import Path

sys.path.append(str(Path.home()) + '/Academics/Spring 2020/ENAE 791/Common Code/Orbital Mechanics Tools/')

from orbit_tools import *
```

## Problem 1: {-}

__Draft Equations:__

_Given:_ 
$$ r_a = r_{apogee} $$

$$ r_e = r_{entry} $$ 

$$ \gamma_{e,des} = \gamma_{entry,desired} $$

$$ \mu \simeq GM_{earth}$$


_Find:_
$$ r_p = \text{guess} $$

$$ a = \frac{r_a + r_p}{2} $$

$$ e = \frac{r_a}{a} - 1 $$

$$ v_{a} = \sqrt{\mu (\frac{2}{r_a} - \frac{1}{a})} $$

$$ v_{e} = \sqrt{\mu (\frac{2}{r_e} - \frac{1}{a})} $$

$$ p = a(1-e^2) $$ 

$$ h = \sqrt{\mu p} $$ 

$$ h = r_e v_e \cos{(\gamma_e)} \implies \gamma_e = \arccos{(\frac{h}{r_e v_e})}$$

I wrote a simple proportional controller to guess a perigee radius, and determine if the entry flight path angle is the desired -2.5 degrees. If not, it guesses the next value. This converges to within one millionth of the desired -2.5 degrees.

```python
## Provided information

# Mass Parameter
mu = astro.constants.GM_earth.to(u.km**3 / u.s**2)

# Apogee Radius
r_a = 5800 * u.km + astro.constants.R_earth

# Entry Radius
r_e = 122 * u.km + astro.constants.R_earth

# Desired flight path angle at entry
gamma_e_des = -2.5 * u.deg

# Initial Guess for radius of perigee 
r_p_guess = astro.constants.R_earth

# Static gain - used to find new guess value
gain = 10

# Tolerance
tolerance = 1e-9 * u.deg

# Dummy value for initial delta
delta = tolerance*2

# Change r_p_guess to find desired flight path angle
# (within tolerance)
while abs(delta.to(u.deg)) > tolerance:
    r_p = r_p_guess
    a = (r_a + r_p) / 2
    e = (r_a / a) - 1
    v_a = np.sqrt(mu * ( (2/r_a) - (1/a) ) )
    v_p = np.sqrt(mu * ( (2/r_p) - (1/a) ) )
    v_e = np.sqrt(mu * ( (2/r_e) - (1/a) ) )
    p = a*(1 - e**2)
    h = np.sqrt(mu * p)
    
    # find gamma_e for r_p = r_p_guess
    gamma_e_calculated = np.arccos( (h) / (r_e * v_e))
    
    # delta = difference between gamma_e_guess and gamma_e_desired
    delta = gamma_e_calculated.to(u.deg) - (-gamma_e_des.to(u.deg))
    
    # simple proportional controller to find new r_p_guess
    r_p_guess = r_p_guess + (gain * delta.to(u.deg).value) * u.km

print('r_p = ', r_p.to(u.km))
print('r_e = ', r_e.to(u.km))
print('v_p = ', v_p.to(u.km / u.s))
print('v_e = ', v_e.to(u.km / u.s))
```

## Problem 2: {-}

The ballistic coefficient $\beta$ can be found using the following equation:
$$ \beta = \frac{m}{c_D A} $$

where:
$$ m = \text{vehicle mass} = 10,400 \text{ kg}$$

$$ c_D = \text{coefficient of drag} = 1.2 $$

$$ A = \text{base area} = \pi (\frac{5}{2}\text{m})^2 = \pi \frac{25}{4}\text{m}^2  $$

```python
## Calculate ballistic coefficient:

m = 10400 * u.kg
c_D = 1.2 * u.one
vehicle_radius = (5 * u.m) / 2
A = constants.pi * vehicle_radius**2

beta = m / (c_D * A)
print('beta = ', beta)
```

## Problem 3: {-}

I wrote a propagator to numerically integrate the entry, with drag. This propagator is printed out separately. The code below was used to call the propagator.

```python
## Propagate entry with drag added to calculations:

# First, find true anomaly at entry
theta_e = 2*constants.pi*u.rad - np.arccos( ( (h**2 - mu*r_e) / (mu*r_e*e) ) )

# Initial conditions
z0 = [gamma_e_des.to(u.deg), 
      v_e.to(u.m / u.s), 
      r_e.to(u.m), 
      theta_e.to(u.deg)
     ]

# Constants for drag calculations
rho_0 = 1.226 * (u.kg / u.m**3)
h_s = 7524 * u.m

# Find orbital period:
# using orbital period as an arbitrary end point for time
orbital_period = 2*constants.pi * np.sqrt(a**3 / mu)

# Choose suggested times to evaluate numerical integration
evaluation_times = np.linspace(0, orbital_period.to(u.s).value, int(1e6)) * u.s

# Call custom orbit propagation function, enable drag calculations
t,y = propagate_orbit_canonical(initial_conditions=z0, mass_param=mu, evaluation_times=evaluation_times,
                                _r_0=astro.constants.R_earth, 
                                _g_0=astro.constants.g0, 
                                _rho_0=rho_0, 
                                _h_s=h_s,
                                _beta=beta,
                                drag_enabled=True, 
                                lift_enabled=False);

# Store results (with units)
t = t * u.s
gamma = y[0,:] * u.deg
v = y[1,:] * (u.m / u.s)
r = y[2,:] * u.m
theta = y[3,:] * u.deg
alt = r - astro.constants.R_earth
```

### Part 3A: {-}
__Plot Altitude vs. Velocity:__

```python
## Part 3a: plot altitude vs velocity
fig3a = plt.figure('3a');
plt.plot(v.to(u.km / u.s),alt.to(u.km));
plt.title('Part 3A: Alt vs. Vel');
plt.xlabel('Velocity (km /s)');
plt.ylabel('Altitude (km)');
```

### Part 3B: {-}
__Plot Altitude vs. Time:__

```python
## Part 3b: plot altitude vs time
fig3b = plt.figure('3b');
plt.plot(t.to(u.s),alt.to(u.km));
plt.title('Part 3B: Alt vs. Time');
plt.xlabel('Time (s)');
plt.ylabel('Altitude (km)');
```

### Part 3C: {-}
__Plot Altitude vs. Downrange Distance:__

Downrange distance was found by numerically integrating the following equation over the entire time of the entry.

$$ \dot{d}_{downrange} = v \cos(\gamma) $$

```python
## Part 3c: plot altitude vs downrange distance

# First, find downrange distance
distance_dot = v.to(u.m / u.s) * np.cos(gamma.to(u.rad))
downrange_distance = cumtrapz(distance_dot.value, 
                              t.to(u.s).value, 
                              initial=(v[0]*np.cos(gamma[0].to(u.rad))).value) * u.m

# Plot altitude vs downrange distance
fig3c = plt.figure('3c');
plt.plot(downrange_distance.to(u.km),alt.to(u.km));
plt.title('Part 3C: Altitude vs. Downrange Distance');
plt.xlabel('Downrange Distance (km)');
plt.ylabel('Altitude (km)');
print('Total Downrange Distance: ', downrange_distance.to(u.km)[-1])
```

### Part 3D: {-}
__Plot Deceleration vs. Altitude:__

```python
## Part 3d: plot deceleration vs altitude

# First, find deceleration
rho = rho_0 * np.exp(-alt / h_s)

n = (-rho / 2) * (v**2 / beta)
# Plot decelaration vs altitude
fig3d = plt.figure('3d');
plt.plot(alt.to(u.m),abs(n.to(u.m / u.s**2)));
plt.title('Part 3D: -Deceleration vs. Altitude');
plt.xlabel('Altitude (m)');
plt.ylabel('-Deceleration (m / s^2)');
```

### Terminal velocity and max deceleration calculations: {-}

__Takeaway:__ 

The spacecraft never reaches terminal velocity, as shown by the deceleration due to drag plotted alongside acceleration due to gravity below. 

Still, calculations for approximated terminal velocity are shown below.

__Calculations:__

The equations for terminal velocity $v_T$ and maximum deceleration $n_{max}$ as as follows:

$$ v_T = \sqrt{-\frac{2 g \beta \sin\gamma}{\rho}} $$ 

$$ n_{max} = \frac{v_e^2}{h_s} \frac{\sin\gamma}{2e} $$ 

These values depend on $\gamma$, which changes throughout the flight. For a rough estimation, I can use a constant $\gamma = \gamma_{entry}$ value. If $v_T$ and $n_{max}$ occur in the first 400 seconds this is not such a bad assumption, since $\gamma$ is relatively level for the first 400 seconds of flight (as shown below).

I also assume $g =g_0$, and $\rho = \rho_0$. The value for $g$ should not change drastically throughout the atmosphere.

__Plot gamma to see if constant gamma is a useful approximation (it is for the first 400 seconds):__

```python
# Plot Gamma vs. Time
# this shows gamma is relatively constant
# for the first 400 or so seconds

plt.plot(t,gamma.to(u.deg))
plt.title('Gamma vs. Time')
plt.xlabel('Time (s)')
plt.ylabel('Gamma (deg)')
plt.show()
```

__Approximate Terminal Velocity Equation:__

```python
# Terminal Velocity and Max Deceleration :
# assume gamma is constant at -2.5 deg for rough estimate
# assume g = g_0
# assume rho=rho_0

# terminal velocity approximation
v_T_apx = np.sqrt( (-2 * astro.constants.g0 * beta * np.sin(gamma_e_des.to(u.rad))) / (rho_0)  )
print('Terminal Velocity (approximated): ', v_T_apx.to(u.m / u.s))

n_max_apx = ((v_e**2 / h_s) * (np.sin(gamma_e_des.to(u.rad)) / (2*e))).decompose()
print('Max Deceleration (approximated): ', n_max_apx.to(u.m / u.s**2))
```

For a more detailed answer for terminal velocity, I can find the time where the deceleration (drag) and the acceleration due to gravity cancel each other out.

__Find time of terminal velocity by plotting acceleration and deceleration vs. time:__

```python
# Find where g == n to find time where terminal velocity occurs
g = astro.constants.g0 * (astro.constants.R_earth / r)**2
plt.plot(t,g)
plt.plot(t,-n)
plt.title('Accel. due to Gravity and Decel. due to Drag vs. Time')
plt.xlabel('Time (s)')
plt.ylabel('g, -n (m/s^2, -m/s^2)')
plt.show()

# Code at this source was used to find the intersection
# https://stackoverflow.com/questions/28766692/intersection-of-two-graphs-in-python-find-the-x-value
intersection_indexes = np.argwhere(np.diff(np.sign(g + n)))
intersection_times = t[intersection_indexes]
print('Time of second intersection: ', intersection_times)
print('Impact Velocity: ', v[-1])
```

As shown above, __the spacecraft never reaches terminal velocity__, though it gets close to terminal velocity just before impact.

### Peak Deceleration: {-}

Finally, I can numerically find the peak deceleration by finding the peak of the deceleration data plotted in part 3c.

```python
print('Peak Deceleration: ', -max(abs(n)))
```

## Problem 4: {-}

```python
# Plot numerical and analytical altitude vs. numerical velocity

# calculate analytical altitude
h_o = alt[0].to(u.m).value
alt_apx = h_s.to(u.m).value * np.log( (np.exp(h_o / h_s.to(u.m).value)) - 
                                     ( ((np.sqrt(mu.to(u.m**3/u.s**2).value * astro.constants.R_earth.to(u.m).value)) / 
                                        (h_s.to(u.m).value * beta.value)) * ( rho_0.value * t.value) )) * u.m

fig4a1 = plt.figure('4a1');
plt.plot(v.to(u.km / u.s), alt.to(u.km));
plt.plot(v.to(u.km / u.s), alt_apx.to(u.km));
plt.title('Part 4A1: Alt vs. Vel');
plt.xlabel('Velocity (km /s)');
plt.ylabel('Altitude (km)');
plt.legend(['Numerical','Analytical']);
```

```python
# Plot numerical altitude vs. numerical and analytical velocity

# calculate analytical velocity
# use gamma = gamma_entry
v_apx = v_e * np.exp( (h_s * rho_0 * rho) / (2 * beta * np.sin(gamma_e_des.to(u.rad)) * rho_0))

fig4a2 = plt.figure('4a2');
plt.plot(v.to(u.km / u.s), alt.to(u.km));
plt.plot(v_apx.to(u.km / u.s), alt.to(u.km));
plt.title('Part 4A2: Alt vs. Vel');
plt.xlabel('Velocity (km /s)');
plt.ylabel('Altitude (km)');
plt.legend(['Numerical','Analytical']);
```

```python
# Plot Numerical and Analytical Deceleration vs Numerical Altitude

# calculate analytical deceleration
# use gamma = gamma_entry
n_apx = ((-rho_0 * v_e**2) / (2 * beta)) * np.exp(-alt / h_s) * np.exp(( (rho_0*h_s) / (beta*np.sin(gamma_e_des.to(u.rad))) ) * np.exp(-alt/h_s))

# plot numerical deceleration alongside analytical deceleration vs altitude
fig4b = plt.figure('4b');
plt.plot(alt.to(u.m),abs(n.to(u.m / u.s**2)));
plt.plot(alt.to(u.m),abs(n_apx.to(u.m / u.s**2)));
plt.title('Part 4B: -Deceleration vs. Altitude');
plt.xlabel('Altitude (m)');
plt.ylabel('-Deceleration (m / s^2)');
plt.legend(['Numerical','Analytical']);
```

### Analytical vs Numerical Comparison {-}

The analytical equations match fairly closely with the numerical results at higher altitudes, and higher velocities. The analytical models break down at lower altitudes, and lower velocities.

## Problem 5: {-}

I wrote a propagator to numerically integrate the entry, with drag. This propagator is printed out separately. The code below was used to call the propagator.

```python
## Propagate entry with drag added to calculations:

# First, find true anomaly at entry
theta_e = 2*constants.pi*u.rad - np.arccos( ( (h**2 - mu*r_e) / (mu*r_e*e) ) )

# Initial conditions
z0 = [gamma_e_des.to(u.deg), 
      v_e.to(u.m / u.s), 
      r_e.to(u.m), 
      theta_e.to(u.deg)
     ]

# Constants for lift, drag calculations
rho_0 = 1.226 * (u.kg / u.m**3)
h_s = 7524 * u.m
L_to_D = 0.25 * u.one

# Find orbital period:
# using orbital period as an arbitrary end point for time
orbital_period = 2*constants.pi * np.sqrt(a**3 / mu)

# Choose suggested times to evaluate numerical integration
evaluation_times = np.linspace(0, orbital_period.to(u.s).value, int(1e6)) * u.s

# Call custom orbit propagation function, enable drag calculations
t,y = propagate_orbit_canonical(initial_conditions=z0, mass_param=mu, evaluation_times=evaluation_times,
                                _lift_to_drag_ratio=L_to_D,
                                _r_0=astro.constants.R_earth, 
                                _g_0=astro.constants.g0, 
                                _rho_0=rho_0, 
                                _h_s=h_s,
                                _beta=beta,
                                drag_enabled=True, 
                                lift_enabled=True);

# Store results (with units)
t = t * u.s
gamma = y[0,:] * u.deg
v = y[1,:] * (u.m / u.s)
r = y[2,:] * u.m
theta = y[3,:] * u.deg
alt = r - astro.constants.R_earth
```

### Part 5A: {-}
__Plot Altitude vs. Velocity:__

```python
## Part 5a: plot altitude vs velocity
fig5a = plt.figure('5a');
plt.plot(v.to(u.km / u.s),alt.to(u.km));
plt.title('Part 5A: Alt vs. Vel');
plt.xlabel('Velocity (km /s)');
plt.ylabel('Altitude (km)');
```

### Part 5B: {-}
__Plot Altitude vs. Time:__

```python
## Part 5b: plot altitude vs time
fig5b = plt.figure('5b');
plt.plot(t.to(u.s),alt.to(u.km));
plt.title('Part 5B: Alt vs. Time');
plt.xlabel('Time (s)');
plt.ylabel('Altitude (km)');
```

### Part 5C: {-}
__Plot Altitude vs. Downrange Distance:__

Downrange distance was found by numerically integrating the following equation over the entire time of the entry.

$$ \dot{d}_{downrange} = v \cos(\gamma) $$

```python
## Part 5c: plot altitude vs downrange distance

# First, find downrange distance
# distance_dot = v*cos(gamma)
distance_dot = v.to(u.m / u.s) * np.cos(gamma.to(u.rad))
downrange_distance = cumtrapz(distance_dot.value, 
                              t.to(u.s).value, 
                              initial=(v[0]*np.cos(gamma[0].to(u.rad))).value) * u.m

# Plot altitude vs downrange distance
fig5c = plt.figure('5c');
plt.plot(downrange_distance.to(u.km),alt.to(u.km));
plt.title('Part 5C: Altitude vs. Downrange Distance');
plt.xlabel('Downrange Distance (km)');
plt.ylabel('Altitude (km)');
print('Total Downrange Distance: ', downrange_distance.to(u.km)[-1])
```

### Part 5D: {-}
__Plot Deceleration vs. Altitude:__

```python
## Part 5d: plot deceleration vs altitude

# First, find deceleration
n = -((rho_0 * v**2) / (2*beta))*np.sqrt(1 + (L_to_D)**2)*np.exp(-alt / h_s) # lifting

# Plot decelaration vs altitude
fig5d1 = plt.figure('5d1');
plt.plot(alt.to(u.m),abs(n.to(u.m / u.s**2)));
plt.title('Part 5D: -Deceleration vs. Altitude');
plt.xlabel('Altitude (m)');
plt.ylabel('-Deceleration (m / s^2)');

# Plot deceleration in g's vs altitude
fig5d2 = plt.figure('5d2');
n_g = -1 / (((2*beta) / (rho_0*astro.constants.R_earth))*np.exp(alt/h_s) + L_to_D);
plt.plot(alt.to(u.m),abs(n_g));
plt.title('Part 5D: -Deceleration (in g\'s)) vs. Altitude');
plt.xlabel('Altitude (m)');
plt.ylabel('-Deceleration (g\'s)');
```

The two plots above appear to give conflicting results. They use different equations. 

The second plot gives the expected result. As the slides show, an L/D value of 0.25 should produce approximately 4 g's max deceleration. 

### Terminal velocity and max deceleration calculations: {-}

__Takeaway:__ 

The spacecraft never reaches terminal velocity, as shown by the deceleration due to drag plotted alongside acceleration due to gravity below. 

When I tried to use the max deceleration equations on slide 43 of Lecture 5, I got very strange results. 

Instead, I found the peak deceleration from my numerical plot.

__Calculations:__

The equations for terminal velocity $v_T$ as as follows:

$$ v_T = \sqrt{-\frac{2 g \beta \sin\gamma}{\rho}} $$ 

I can use the equations on slide 43 of Lecture 5 for maximum deceleration.

The terminal velocity calculation depends on $\gamma$, which changes throughout the flight. For a very rough estimation, I can use a constant $\gamma = \gamma_{entry}$ value. This is a bad assumption,, since $\gamma$ changes a lot for the first 400 seconds of flight (as shown below).

I also assume $g =g_0$, and $\rho = \rho_0$. The value for $g$ should not change drastically throughout the atmosphere.

__Plot Gamma vs. Time to see if constant Gamma is a useful approximation (it is not):__

```python
# Plot Gamma vs. Time
# this shows gamma is relatively constant
# for the first 400 or so seconds

plt.plot(t,gamma.to(u.deg))
plt.title('Gamma vs. Time')
plt.xlabel('Time (s)')
plt.ylabel('Gamma (deg)')
plt.show()
```

### Terminal Velocity: {-}
__Approximate Terminal Velocity:__

```python
# Terminal Velocity and Max Deceleration :
g = astro.constants.g0 * (r[0] / r)**2

# terminal velocity approximation
v_T_apx = np.sqrt( (-2 * astro.constants.g0 * beta * np.sin(gamma_e_des.to(u.rad))) / (rho_0)  )
print('Terminal Velocity (approximated): ', v_T_apx.to(u.m / u.s))
```

For a more detailed answer for terminal velocity, I can try to find the time where the deceleration (drag) and the acceleration due to gravity cancel each other out.

For a more detailed answer for terminal velocity, I can find the time where the deceleration (drag) and the acceleration due to gravity cancel each other out.

__Find time of terminal velocity by plotting acceleration and deceleration:__

```python
# Find where g == n to find time where terminal velocity occurs
g = astro.constants.g0 * (astro.constants.R_earth / r)**2
plt.plot(t,g)
plt.plot(t,-n)
plt.title('Accel. due to Gravity and Decel. due to Drag vs. Time')
plt.xlabel('Time (s)')
plt.ylabel('g, -n (m/s^2, -m/s^2)')
plt.show()

# Code at this source was used to find the intersection
# https://stackoverflow.com/questions/28766692/intersection-of-two-graphs-in-python-find-the-x-value
intersection_indexes = np.argwhere(np.diff(np.sign(g + n)))
intersection_times = t[intersection_indexes]
print('Time of second intersection: ', intersection_times)
print('Impact Velocity: ', v[-1])
```

As shown above, __the spacecraft never reaches terminal velocity__.

Finally, I can numerically find the peak deceleration by finding the peak of the deceleration data plotted in part 5c.

### Peak Deceleration: {-}

__Numerical Peak Deceleration:__

```python
print('Peak Deceleration: ', -max(abs(n)))
```

__Plot Deceleration (in g's) to find peak Deceleration:__


I can also plot deceleration written in g's, as shown on slide 15 of Lecture 5:

```python
## Find deceleration (written in g's)
n_g = -1 / (((2*beta) / (rho_0*astro.constants.R_earth))*np.exp(alt/h_s) + L_to_D);
plt.plot(t, -n_g);
plt.title('Deceleration (in g\'s)');
plt.xlabel('Time (s)');
plt.ylabel('Deceleration in g\'s');
print('Peak Deceleration (in g\'s): ', max(abs(n_g)))
```

__Approximation of max deceleration (bad results):__

```python
# plot terminal veloctity vs. altitude (slide 43 of lifting presentation)
g_e = gamma_e_des.to(u.rad)
h_m = h_s * np.log( ( (-rho_0 * h_s) / (2 * beta * np.sin(g_e)) ) * (np.sqrt(4 + (L_to_D**2)*(1/np.sin(g_e))**2) - (L_to_D * (1/np.tan(g_e)))  ) )
gamma_m = np.arccos(np.cos(g_e) - ( (L_to_D * np.sin(g_e)) / ( np.sqrt(4 + (L_to_D**2 * (1/np.sin(g_e))**2)) - (L_to_D * (1 / np.tan(g_e))) ) )  )
v_m = v_e * np.exp((-gamma_m.value - g_e.value) /  (L_to_D.value))
n_max_apx = ((rho_0 * v_e**2) / (2*beta)) * np.sqrt(1 + (L_to_D)**2) * v_m**2
print('Max Deceleration (approximated): ', n_max_apx.decompose())
print('Something is wrong here, these units and values do not make any sense')
```


