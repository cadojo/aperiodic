[
  {
    "objectID": "credits.html",
    "href": "credits.html",
    "title": "Credits",
    "section": "",
    "text": "This site is hosted with GitHub Pages."
  },
  {
    "objectID": "credits.html#development",
    "href": "credits.html#development",
    "title": "Credits",
    "section": "Development",
    "text": "Development\nA new and fantastic tool for literate programming, Quarto, is used to develop and render this site. The full website theme is built on top of Bootstrap; specifically, the Pulse Quarto Theme is used for this website."
  },
  {
    "objectID": "credits.html#fun-quotes",
    "href": "credits.html#fun-quotes",
    "title": "Credits",
    "section": "Fun Quotes",
    "text": "Fun Quotes\nNone of the quotes shown on the site homepage are created by me! They are all from various sources on the internet. I‚Äôll add proper citations soon!"
  },
  {
    "objectID": "portfolio/communication/publications.html",
    "href": "portfolio/communication/publications.html",
    "title": "Publications",
    "section": "",
    "text": "I replicated nonlinear region of attraction analysis completed by Chakraborty et al for a graduate nonlinear controls course project. While the estimation methods were not replicated, the polynomial approximation was replicated with Python, and the results were summarized in a technical paper. The polynomial dynamics have since been ported to Julia with PolynomialGTM.jl.\n\n\n\nI investigated low-cost manifold-based interplanetary transfer designs as part of a graduate astrodynamics course project. The results were summarized in a final paper. This investigation is ongoing! I‚Äôm expecting to produce a follow up paper with calculation corrections, and new results, in 2022. As part of this project, a list of thousands of initial conditions for periodic orbits in our solar system was published on GitHub!"
  },
  {
    "objectID": "portfolio/communication/presentations.html",
    "href": "portfolio/communication/presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "As a graduate student, I developed an open-source astrodynamics package called GeneralAstrodynamics.jl. I used this package to investigate invariant-manifold-based Earth-Jupiter transfer designs. This JuliaCon talk provides a brief introduction to astrodynamics, scientific computing, and Julia. The presentation slides and Pluto notebook are available on GitHub."
  },
  {
    "objectID": "portfolio/software/miscellaneous.html",
    "href": "portfolio/software/miscellaneous.html",
    "title": "Miscellaneous Software",
    "section": "",
    "text": "This is a super opinionated project! The gist is this ‚Äî what if we cleaned up every unneccessary name from a Python module once it‚Äôs fully loaded? By using the pattern below, all of your namespaces will be kept clean and tidy.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    for _ in (*locals(), \"_\"):\n        if not _.startswith(\"__\") and _ not in __export__:\n            del locals()[_]\nI put the above pattern in a package called module-hygiene! With this new package, you could rewrite module.py as follows.\n\"\"\"\nPretend this is the contents of module.py!\n\"\"\"\n\n__export__ = {\n    \"MyType\",\n    \"myfunc\",\n}\n\n\nclass MyType:\n    ...\n\ndef myfunc(x): \n    ...\n\n\nif __name__ == \"__main__\":\n    ...\n\nelse:\n    from hygiene import cleanup\n    exec(cleanup())\n\n\n\nThe rich Python package is excellent! I‚Äôve added Julia-style in-terminal Markdown admonitions via the rich-admonitions package! Check out some simple usage below.\n\nfrom rich import print\nfrom admonitions import Admonition\n\nmessage = Admonition.note(\n    Admonition.info(\n        Admonition.warning(\n            Admonition.danger(\n                Admonition(\n                    \"We're in too deep! ü•Ω\", \n                    header = \"Oh jeez...\", \n                    style = \"purple\"\n                )\n            )\n        )\n    )\n)\n\nprint(message)\n\n‚îÇ Note  \n‚îÇ\n‚îÇ  ‚îÇ Info                                                                                                        \n‚îÇ  ‚îÇ                                                                                                             \n‚îÇ  ‚îÇ  ‚îÇ Warning                                                                                                  \n‚îÇ  ‚îÇ  ‚îÇ                                                                                                          \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ Danger                                                                                                \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ                                                                                                       \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ Oh jeez...                                                                                         \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ                                                                                                    \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ  We're in too deep! ü•Ω                                                                             \n‚îÇ  ‚îÇ  ‚îÇ  ‚îÇ                                                                                                       \n‚îÇ  ‚îÇ  ‚îÇ                                                                                                          \n‚îÇ  ‚îÇ                                                                                                             \n‚îÇ"
  },
  {
    "objectID": "portfolio/software/scientific.html",
    "href": "portfolio/software/scientific.html",
    "title": "Scientific Software",
    "section": "",
    "text": "I developed a Julia package alongside my graduate astrodynamics courses, and I‚Äôve registered this package in Julia‚Äôs package registry! Right now, the package provides calculations relating to conic orbits, and circular-restricted three-body orbits. I‚Äôm most proud of the package‚Äôs Halo orbit and manifold solvers! At my highest aspiration, this package will one day serve a purpose similar to Python‚Äôs excellent poliastro.\n\n\n\nCommon astrodynamical models are provided in another open-source Julia package I‚Äôve written: AstrodynamicalModels.jl. This package currently includes restricted two-body, n-body, and circular restricted three-body spacecraft dynamics. The package extends the excellent ModelingToolkit.jl; check that out if you‚Äôre not familiar! Playing around with the symbolic-numeric ‚Äúbridge‚Äù that ModelingToolkit provides helped me to re-learn some basic dynamics concepts (e.g.¬†‚Äúoh yeah, the hessian of the potential energy equation is equivalent to the Jacobian of the system‚Äôs equations of motion!‚Äù) Documentation is available here!\n\n\n\nWhile this project is not yet open-source, it soon will be! I wrote this Julia package as a graduate student. It provides symbolic code generation for manipulator kinematics. To get this to work, I ended up reworking some simple C++, MATLAB, and Stan code generation capabilities in Symbolics.jl!\n\n\n\nThis project is an unofficial implementation of publicly available polynomial approximations for NASA‚Äôs Generic Transport Model aircraft. Check out this package if you want a sandbox dynamical model for a control theory project! I‚Äôm using this package as an example for a control theory note-set I‚Äôm writing."
  },
  {
    "objectID": "portfolio/background/introduction.html",
    "href": "portfolio/background/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "I grew up in New Jersey, and studied electrical and aerospace engineering in Maryland. I‚Äôm currently working as a Dynamics & Controls engineer in Texas in support of human spaceflight and space exploration projects. I spend free time exploring nearby parks and trails, writing, and working on open-source software projects."
  },
  {
    "objectID": "portfolio/background/introduction.html#technical-interests",
    "href": "portfolio/background/introduction.html#technical-interests",
    "title": "Introduction",
    "section": "Technical Interests",
    "text": "Technical Interests\n\nScientific Software\nI‚Äôm very comfortable writing scientific software. I developed software for space robotics projects as an undergraduate and graduate student (C++), and open-source astrodynamics and robotics analysis tools (Julia). I have recently started maintaining and developing scientific software with Python.\n\n\nAerospace Controls\nI emphasized applied controls and control theory throughout my undergraduate and graduate coursework. I‚Äôm quite familiar with applying linear analysis methods to nonlinear dynamical systems, and most of my graduate course projects related to studying nonlinear analysis methods. As a student, I primarily investigated region of attraction estimation methods, and coherent structure (manifold) dynamics near equilibrium points. I studied flight dynamics relating to atmospheric vehicles, and spacecraft. I found a love for astrodynamics towards the end of my academic career!\n\n\nScientific Communication\nI will be honing my scientific communication skills over the next few years by writing open source notebooks about technical topics of interest! This process will contibute the growing list of free educational resources, and will help me to grow as a technical communicator. I‚Äôve found that writing (and coding) technical concepts really helps me to solidify my own knowledge. I hope to produce content in forms similar to MIT‚Äôs excellent Computational Thinking series!"
  },
  {
    "objectID": "portfolio/background/education.html",
    "href": "portfolio/background/education.html",
    "title": "Education",
    "section": "",
    "text": "I studied electrical engineering at the University of Maryland from fall 2014 to spring 2021. I took a break from classes to work as an engineering intern at NASA during my fourth year. I graduated with an emphasis in controls; my senior year included several undergraduate courses related to control theory and applied controls.\nIn spare time during semesters and academic breaks, I worked as an undergraduate research assistant at the University of Maryland‚Äôs Space Systems Lab. I primarily developed software to operate and control the lab‚Äôs robotic manipulators. I enjoyed earning my open-water (scuba) certification to help with the lab‚Äôs neutral buoyancy research!\n\n\n\nI began my M.S. degree in the fall immediately following my undergraduate graduation, and completed my M.S. degree in May 2021. My academic focus was Space Systems, though I also took a substantial number of courses relating to control theory and flight control. I worked as the Space Systems Lab lead software developer in my second year of graduate school. I developed the lab‚Äôs kinematics and manipulator control interfaces using C++ and the Robot Operating System."
  },
  {
    "objectID": "portfolio/background/education.html#internships",
    "href": "portfolio/background/education.html#internships",
    "title": "Education",
    "section": "Internships",
    "text": "Internships\n\nNASA JSC\nI worked as an intern at NASA‚Äôs Johnson Space Center continuously from fall 2017 through summer 2018, and every summer following through 2020. I had the pleasure of exploring several roles, including as an avionics engineer and as a flight operations support engineer. I then worked four internships with an aerospace controls group, and solidified my love for developing flight software and analysis software.\n\n\nHarris Corporation\nI worked as a radio-frequency engineer for Harris Corporation in the summer of 2016. I independently wrote automation software using Visual Basic to complete a 20-hour data organization task in less than two minutes. I worked with another intern to implement an ITU rain attenuation model using MATLAB and C#.\n\n\nSRI International\nIn the summer of 2015 I helped to annotate data for machine learning engineers. I also worked with another intern to develop a near-infrared LED array circuit board for gaze tracking applications."
  },
  {
    "objectID": "blog/posts/jpl-horizons-scripts.html",
    "href": "blog/posts/jpl-horizons-scripts.html",
    "title": "HORIZONS Scripting Interface",
    "section": "",
    "text": "This tutorial describes an indefinitely supported, yet obselete automated command-line interface to the JPL HORIZONS system. The recommended methods for automatically downloading JPL HORIZONS ephemeris data is the graphical interface, or the new REST API.\n\n\n\nNASA provides fantastic tools that are available for personal use ‚Äì one such tool is NASA JPL‚Äôs HORIZONS. HORIZONS allows users to request positions, velocities, and physical attributes for thousands of bodies in our solar system. Users can request celestial body positions and velocities (often referred to as ephemeris) for several time steps. These orbital states are very accurately modeled! Ephemeris models often include relativistic effects, solar radiation pressure, aspherical bodies, and more. After receiving a grid of orbital states from HORIZONS, a user can interpolate between timesteps to find precise orbital states at any time.\nHORIZONS has a web interface, and email and Telnet interfaces. While the web interface is simple to use, it does not provide every capability offered by the email and Telnet interfaces. If you just want one ephemeris file for a specific use case, the web interface is probably ideal! While I‚Äôve never used the email interface, I have used the Telnet interface ‚Äì the Telnet interface can be invoked by entering telnet://horizons.jpl.nasa.gov:6775 in a terminal of your choice. Otherwise, if you want to batch-request many ephemeris files, read on for a walkthrough for requesting ephemeris files from HORIZONS within a terminal, without manually walking through the Telnet interface!"
  },
  {
    "objectID": "blog/posts/jpl-horizons-scripts.html#procedure",
    "href": "blog/posts/jpl-horizons-scripts.html#procedure",
    "title": "HORIZONS Scripting Interface",
    "section": "Procedure",
    "text": "Procedure\nRather than manually entering your desired ephemeris file attributes through HORIZONS‚Äô web or Telnet interfaces, NASA JPL has provided open-source scripts for automatically fetching ephemeris data from JPL servers. The steps below provide all the information you need to use these scripts, and wrap them with a simple .sh script for ease of use.\nNote that the rest of this walkthrough requires you use a terminal within a Unix-like system. If you want to use a Windows machine, consider using the Windows Subsystem for Linux.\nIf you follow the directions in this walkthrough verbatim, you‚Äôll fetch a CSV-formatted ephemeris file without any text labels, with columns (from left to right): Julian day, X Position (km), Y Position (km), Z Position (km), X Velocity (km/s), Y Velocity (km/s), Z Velocity (km/s).\n\nInstall Dependencies\nJPL‚Äôs scripts use expect, an automation tool, to interact with the HORIZONS Telnet interface (so you don‚Äôt have to). You will need both expect and telnet installed on your system. JPL‚Äôs output ephemeris files contain carriage return characters that are not expected by Unix-like systems. You can install and use sponge (often packaged with moreutils), as shown below, to help remove these carriage returns, and other extraneous information from the data files returned by HORIZONS. If you only wish to remove the carriage return characters, you can also simply open the output ephemeris file in VSCode ‚Äì this will re-format the file for your operating system.\nInstalling Dependencies on MacOS:\n# Uses Homebrew, a MacOs package manager: https://brew.sh\nbrew install inetutils # provides telnet\nbrew install expect    \nbrew install moreutils # (optional) provides sponge\nInstalling Dependencies on Ubuntu:\n# Uses apt, the default Ubuntu package manager\nsudo apt install telnet\nsudo apt install expect\nsudo apt install moreutils # (optional) provides sponge\nInstallation on other systems (Debian, Arch, etc.) is likely very similar to the installation commands above.\n\n\nDownload JPL Scripts\nJPL HORIZONS maintains scripts which users interact with through the command-line. See the HORIZONS documentation, which states‚Ä¶\n\nThe command-line interface can be automated. However, this is no longer recommended given the APIs introduced in 2021. Deprecated example scripts may be found in the FTP directory <fhttps://ssd.jpl.nasa.gov/ftp/xfr/SCRIPTS/> and will be supported indefinately.\n\nThe script interface README offers information about the existing scripts. Download and read through this file before continuing!\n\n\n\n\n\n\nYou must verify you are permitted to download and use these scripts!\n\n\n\nRefer to the HORIZONS documentation, the command-line interface README, and the script contents to determine if your usage and context forbids you from using these resources. The remainder of this tutorial assumes the user has read these instructions, and has determined they meet the qualifications for downloading and using all HORIZONS resources.\n\n\nIf you determine you are permitted, download the vec_tbl and vec_tbl.inp from JPL‚Äôs servers. The latter sets input parameters for your requested ephemeris data, the former is the ultimate script users can call to get ephemeris data. Remember to read their license ‚Äì¬†usage may not be free for commercial use, and text in each script file may state that some users are not permitted to download and use the scripts.\nwget ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/vec_tbl\nwget ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/vec_tbl.inp\nWe‚Äôll also need to make vec_tbl executable.\nchmod u+x vec_tbl\n\n\nSet Input Parameters\nThe input file, vec_tbl.inp, sets environment variables that vec_tbl uses to walk through the HORIZONS Telnet interface automatically. These parameters provide information like ‚Äúwhere should the origin be placed‚Äù and ‚Äúwhat time window, and what size timesteps should be returned‚Äù.\nEdit vec_tbl.inp with your desired ephemeris file parameters. Some helpful parameter values are provided below ‚Äì these parameters will result in an ephemeris format with the following attributes:\n\nOrigin placed at solar system barycenter\nCSV output with Cartesian coordinates\nTime window from 2020 to 2070, with 6-hour increments\nNo text labels in the CSV data\n\nNote ‚Äì you can replace @ssb with @sun to place the origin of the ephemeris data at the Sun‚Äôs center of mass.\nset   EMAIL_ADDR    \"your_email_address@aol.net\" ;\nset   CENTER        \"@ssb\"                       ;\nset   REF_PLANE     \"FRAME\"                      ;\nset   START_TIME    \"2020-Jan-1\"                 ;\nset   STOP_TIME     \"2070-Jan-1\"                 ;\nset   STEP_SIZE     \"6h\"                         ;\nset   CSV_FORMAT    \"YES\"                        ;\nset   VEC_TABLE     \"2\"                          ;\nset   REF_SYSTEM    \"J2000\"                      ;\nset   VEC_CORR      \"1\"                          ;\nset   OUT_UNITS     \"1\"                          ;\nset   CSV_FORMAT    \"YES\"                        ;\nset   VEC_LABELS    \"NO\"                         ;\nset   VEC_DELTA_T   \"NO\"                         ;\nset   VEC_TABLE     \"2\"                          ;\n\n\nFetch Ephemeris Data\nNow we can use vec_tbl to download Ephemeris data for any celestial body tracked by HORIZONS. The usage for vec_tbl is shown below.\n./vec_tbl <BODY_ID> <OUTPUT_FILENAME>\nThe second argument is the NAIF ID for the celestial body you‚Äôd like to track. IDs for common solar system bodies are provided in the table below.\n\n\n\nSolar System Body\nNAIF ID\n\n\n\n\nMercury Barycenter\n1\n\n\nVenus Barycenter\n2\n\n\nEarth-Moon Barycenter\n3\n\n\nMars Barycenter\n4\n\n\nJupiter Barycenter\n5\n\n\nSaturn Barycenter\n6\n\n\nUranus Barycenter\n7\n\n\nNeptune Barycenter\n8\n\n\nPluto Barycenter\n9\n\n\nSun\n10\n\n\nMercury\n199\n\n\nVenus\n299\n\n\nMoon\n301\n\n\nEarth\n399\n\n\nMars\n499\n\n\nJupiter\n599\n\n\nSaturn\n699\n\n\nUranus\n799\n\n\nNeptune\n899\n\n\nPluto\n999\n\n\n\nNote the output file will have a preamble, which includes physical characteristics of your selected celestial body, and other information.\n\n\nRe-format Ephemeris Data (optional)\nThe output format of the Ephemeris file will depend on your input parameters provided in vec_tbl.inp. If you‚Äôre following this walk-through verbatim (aka using the input parameters provided above), then your output file will have 7 columns: Julian day, date-time label, X, Y, Z positions, X, Y, Z velocities. All columns are numeric, with the exception of column 2 ‚Äì this makes loading data into MATLAB, Python, or Julia a bit more complicated. We don‚Äôt need column 2 to interpolate between Cartesian states, because column 2 is simply a plain-language description of the Julian Day value in column 1. We can use sed and awk magic to strip out the second column, and remove the preamble from the Ephemeris file. The sed and awk commands below are taken directly from the two StackOverflow answers: sed reference, awk reference. Remember to replace <FILE> with your desired output file name!\n# Filter out data-file preamble\nsed -n '/\\$\\$SOE/,/\\$\\$EOE/{//!p;}' <FILE> | sponge <FILE> \n\n# Remove second column (data-time label)\nawk -F , 'BEGIN {OFS=FS}  {$2=\"\"; sub(\",,\", \",\"); print}' <FILE> | sponge <FILE> \nNow your file will have only comma-delimited rows of numbers!"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blog Posts",
    "section": "",
    "text": "HORIZONS Scripting Interface\n\n\n\n\n\n\n\ntutorial\n\n\nspace\n\n\nephemeris\n\n\n\n\nInformation about planets, stars, and asteroids is free!\n\n\n\n\n\n\nOct 26, 2021\n\n\nJoe(y) Carpinelli\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joe(y) Carpinelli",
    "section": "",
    "text": "Earth is the only planet with rainbows!\n\n\n\n\n \n  \n   \n  \n    \n     Email\n  \n  \n    \n     Twitter\n  \n  \n    \n     GitHub"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Joe(y) Carpinelli",
    "section": "About Me",
    "text": "About Me\nThis is a personal website! I‚Äôll upload updates to my personal & professional portfolio, technical and non-technical blog-style posts, and (soon) technical notes explaining some topics I‚Äôm interested in. Comments are\n\n\n\n\n\n\nWhat does aperiodic mean?\n\n\n\nThe URL of this site is aperiodic.dev. This is my attempt at a play on words! I‚Äôm a periodic developer ‚Äî my career primarily relates to aerospace engineering, but I write scientific software frequently to serve that purpose. I also studied dynamics and controls, in that context aperiodicity refers to a non-periodic system. The term aperiodic relates to my relationship with scientific software development, and a field I‚Äôm passionate about. For only $12 on Google‚Äôs URL registrator, that‚Äôs a steal!"
  },
  {
    "objectID": "permission.html",
    "href": "permission.html",
    "title": "License",
    "section": "",
    "text": "Open Source License\n\n\n\nMIT License\nCopyright (c) 2022 Joe Carpinelli\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
]